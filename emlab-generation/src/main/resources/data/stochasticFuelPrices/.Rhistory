geom_line() + #(aes(colour = runNumber))
xlab("Year") +
ylab("Eur") +
ggtitle("Tender Subsidy \n Germany") #give the plot a title
plot(yearlyTenderSubsidyplotB)
plotCashBalances <- function(df){
localEnv <- environment()
cashA <- df$ProducerCash_Energy_Producer_A
cashB <- df$ProducerCash_Energy_Producer_B
cashC <- df$ProducerCash_Energy_Producer_C
cashD <- df$ProducerCash_Energy_Producer_D
cashE <- df$ProducerCash_Energy_Producer_E
cashF <- df$ProducerCash_Energy_Producer_F
cashG <- df$ProducerCash_Energy_Producer_G
cashH <- df$ProducerCash_Energy_Producer_H
prodCashPlot <- ggplot(df, aes(x=df$tick), environment = localEnv)+
geom_line(aes(y=cashA, colour="cashA"))+
geom_line(aes(y=cashB, colour="cashB"))+
geom_line(aes(y=cashC, colour="cashC"))+
geom_line(aes(y=cashD, colour="cashD"))+
geom_line(aes(y=cashE, colour="cashE"))+
geom_line(aes(y=cashF, colour="cashF"))+
geom_line(aes(y=cashG, colour="cashG"))+
geom_line(aes(y=cashH, colour="cashH"))+
ggtitle("Overview of producer cash balances")+
scale_x_continuous(name = "Time (year)")+
scale_y_continuous(name = "Cash balance (EUR)")+
scale_colour_manual(name = "Legend", values = c(cashA = "green", cashB = "blue", cashC = "yellow", cashD = "seashell4",
cashE = "purple", cashF = "red", cashG = "pink", cashH = "black"),
labels = c(cashA = "Energy producer A",cashB = "Energy producer B",cashC = "Energy producer C",
cashD = "Energy producer D",cashE = "Energy producer E",cashF = "Energy producer F",
cashG = "Energy producer G",cashH = "Energy producer H"))+
theme(plot.title = element_text(lineheight = 0.8, face = "bold", size = 11),
axis.title.x = element_text(size = 9, angle = 0),
axis.title.y = element_text(size = 9, angle = 90),
legend.text = element_text(size = 8),
legend.title = element_text(size = 10))
ggsave(filename = paste(filePrefix, "prodCashBalancePlot.png", sep=""),
plot = prodCashPlot, width=30, height=16.51, units="cm", scale=scaleFactor)
}
plotCashBalances(bigDF)
plotProfitIncludingTenderSubsidy <- function(df){
localEnv <- environment()
profitA <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdA
profitB <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdB
profitC <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdC
profitD <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdD
profitE <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdE
profitF <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdF
profitG <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdG
profitH <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdH
profitI <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdI
prodProfitPlot <- ggplot(df, aes(x=df$tick), environment = localEnv)+
geom_line(aes(y=profitA, colour="profitA"))+
geom_line(aes(y=profitB, colour="profitB"))+
geom_line(aes(y=profitC, colour="profitC"))+
geom_line(aes(y=profitD, colour="profitD"))+
geom_line(aes(y=profitE, colour="profitE"))+
geom_line(aes(y=profitF, colour="profitF"))+
geom_line(aes(y=profitG, colour="profitG"))+
geom_line(aes(y=profitH, colour="profitH"))+
geom_line(aes(y=profitI, colour="profitI"))+
ggtitle("Overview of producer profit \n Including Tender Subsidy")+
scale_x_continuous(name = "Time (year)")+
scale_y_continuous(name = "Profit (EUR)")+
scale_colour_manual(name = "Legend", values = c(profitA = "green", profitB = "blue", profitC = "yellow", profitD = "seashell4",
profitE = "purple", profitF = "red", profitG = "pink", profitH = "black"),
labels = c(profitA = "Energy producer A",profitB = "Energy producer B",profitC = "Energy producer C",
profitD = "Energy producer D",profitE = "Energy producer E",profitF = "Energy producer F",
profitG = "Energy producer G",profitH = "Energy producer H",profitI = "Energy producer I"))+
theme(plot.title = element_text(lineheight = 0.8, face = "bold", size = 11),
axis.title.x = element_text(size = 9, angle = 0),
axis.title.y = element_text(size = 9, angle = 90),
legend.text = element_text(size = 8),
legend.title = element_text(size = 10))
ggsave(filename = paste(filePrefix, "prodProfitIncludingTenderSubsidyPlot.png", sep=""),
plot = prodProfitPlot, width=30, height=16.51, units="cm", scale=scaleFactor)
}
plotProfitIncludingTenderSubsidy(bigDF)
plotProfitIncludingTenderSubsidy <- function(df){
localEnv <- environment()
profitA <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdA
profitB <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdB
profitC <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdC
profitD <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdD
profitE <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdE
profitF <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdF
profitG <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdG
profitH <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdH
profitI <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdI
prodProfitPlot <- ggplot(df, aes(x=df$tick), environment = localEnv)+
geom_line(aes(y=profitA, colour="profitA"))+
geom_line(aes(y=profitB, colour="profitB"))+
geom_line(aes(y=profitC, colour="profitC"))+
geom_line(aes(y=profitD, colour="profitD"))+
geom_line(aes(y=profitE, colour="profitE"))+
geom_line(aes(y=profitF, colour="profitF"))+
geom_line(aes(y=profitG, colour="profitG"))+
geom_line(aes(y=profitH, colour="profitH"))+
geom_line(aes(y=profitI, colour="profitI"))+
ggtitle("Overview of producer profit \n Including Tender Subsidy")+
scale_x_continuous(name = "Time (year)")+
scale_y_continuous(name = "Profit (EUR)")+
scale_colour_manual(name = "Legend", values = c(profitA = "green", profitB = "blue", profitC = "yellow", profitD = "seashell4",
profitE = "purple", profitF = "red", profitG = "pink", profitH = "black"),
labels = c(profitA = "Energy producer A",profitB = "Energy producer B",profitC = "Energy producer C",
profitD = "Energy producer D",profitE = "Energy producer E",profitF = "Energy producer F",
profitG = "Energy producer G",profitH = "Energy producer H",profitI = "Energy producer I"))+
theme(plot.title = element_text(lineheight = 0.8, face = "bold", size = 11),
axis.title.x = element_text(size = 9, angle = 0),
axis.title.y = element_text(size = 9, angle = 90),
legend.text = element_text(size = 9),
legend.title = element_text(size = 10))
ggsave(filename = paste(filePrefix, "prodProfitIncludingTenderSubsidyPlot.png", sep=""),
plot = prodProfitPlot, width=30, height=16.51, units="cm", scale=scaleFactor)
}
plotProfitIncludingTenderSubsidy(bigDF)
plotProfitIncludingTenderSubsidy <- function(df){
localEnv <- environment()
profitA <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdA
profitB <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdB
profitC <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdC
profitD <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdD
profitE <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdE
profitF <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdF
profitG <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdG
profitH <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdH
profitI <- df$ProfitProducersYearlyIncludingTenderSubsidy_ProfitProdI
prodProfitPlot <- ggplot(df, aes(x=df$tick), environment = localEnv)+
geom_line(aes(y=profitA, colour="profitA"))+
geom_line(aes(y=profitB, colour="profitB"))+
geom_line(aes(y=profitC, colour="profitC"))+
geom_line(aes(y=profitD, colour="profitD"))+
geom_line(aes(y=profitE, colour="profitE"))+
geom_line(aes(y=profitF, colour="profitF"))+
geom_line(aes(y=profitG, colour="profitG"))+
geom_line(aes(y=profitH, colour="profitH"))+
geom_line(aes(y=profitI, colour="profitI"))+
ggtitle("Overview of producer profit \n Including Tender Subsidy")+
scale_x_continuous(name = "Time (year)")+
scale_y_continuous(name = "Profit (EUR)")+
scale_colour_manual(name = "Legend", values = c(profitA = "green", profitB = "blue", profitC = "yellow", profitD = "seashell4",
profitE = "purple", profitF = "red", profitG = "pink", profitH = "black" , profitI = "grey"),
labels = c(profitA = "Energy producer A",profitB = "Energy producer B",profitC = "Energy producer C",
profitD = "Energy producer D",profitE = "Energy producer E",profitF = "Energy producer F",
profitG = "Energy producer G",profitH = "Energy producer H",profitI = "Energy producer I"))+
theme(plot.title = element_text(lineheight = 0.8, face = "bold", size = 11),
axis.title.x = element_text(size = 9, angle = 0),
axis.title.y = element_text(size = 9, angle = 90),
legend.text = element_text(size = 8),
legend.title = element_text(size = 10))
ggsave(filename = paste(filePrefix, "prodProfitIncludingTenderSubsidyPlot.png", sep=""),
plot = prodProfitPlot, width=30, height=16.51, units="cm", scale=scaleFactor)
}
plotProfitIncludingTenderSubsidy(bigDF)
#tThis file can generate n number of trends in the form of a triangular distribution, whose mode follows the
#sequence
library(reshape)
library(ggplot2)
library(plyr)
library(triangle)
noOfTicks = 50
noOfRepetitions = 120
columnNames = as.character(seq.int(2011,2060))
setwd("~/emlab-generation/emlab-generation/src/main/resources/data/stochasticDemandNLandDE")
#For NL
start = 1
top = 1.02
max = 1.05
min = 0.99
rowNames = c()
modeSeq = seq(start, top, length.out = noOfTicks)
demandNL<- matrix(nrow = noOfRepetitions, ncol = noOfTicks )
for(j in 1:noOfRepetitions){
demandNLGrowthRate=rtriangle(noOfTicks,a=min,b=max, c=top)
demandNL[j,1]=start
for(i in 2:noOfTicks){
demandNL[j,i] <- demandNL[j,i-1]*demandNLGrowthRate[i]
}
rowNames <- c(rowNames, paste('demandNL-',j,sep = ""))
}
colnames(demandNL) <- columnNames
write.csv(demandNL, file =paste('demandGrowthNL.csv'), quote = F, row.names = rowNames)
#For DE
start = 1
top = 1.02
max = 1.05
min = 0.99
noOfTicks = 50
rowNames = c()
modeSeq = seq(start, top, length.out = noOfTicks)
demandDE<- matrix(nrow = noOfRepetitions , ncol = noOfTicks )
for(j in 1:noOfRepetitions){
demandDEGrowthRate=rtriangle(noOfTicks,a=min,b=max, c=top)
demandDE[j,1]=start
for(i in 2:noOfTicks){
demandDE[j,i] <- demandDE[j,i-1]*demandDEGrowthRate[i]
}
rowNames <- c(rowNames, paste('demandDE-',j,sep = ""))
}
colnames(demandDE) <- columnNames
write.csv(demandDE, file =paste('demandGrowthDE.csv'), quote = F, row.names = rowNames)
setwd("~/emlab-generation/emlab-generation/src/main/resources/data/stochasticFuelPrices")
#For Coal Price
start = 3.6
top = 1.01
max = 1.05
min = 0.97
noOfTicks = 50
rowNames = c()
modeSeq = seq(start, top, length.out = noOfTicks)
coalPrice<- matrix(nrow = noOfRepetitions , ncol = noOfTicks )
for(j in 1:noOfRepetitions){
coalPriceGrowthRate=rtriangle(noOfTicks,a=min,b=max, c=top)
coalPrice[j,1]=start
for(i in 2:noOfTicks){
coalPrice[j,i] <- coalPrice[j,i-1]*coalPriceGrowthRate[i]
}
rowNames <- c(rowNames, paste('coalPrice-',j,sep = ""))
}
colnames(coalPrice) <- columnNames
write.csv(coalPrice, file =paste('coalPrice.csv'), quote = F, row.names = rowNames)
#For gas Price
start = 9.02
top = 1.01
max = 1.05
min = 0.97
noOfTicks = 50
rowNames = c()
modeSeq = seq(start, top, length.out = noOfTicks)
gasPrice<- matrix(nrow = noOfRepetitions , ncol = noOfTicks )
for(j in 1:noOfRepetitions){
gasPriceGrowthRate=rtriangle(noOfTicks,a=min,b=max, c=top)
gasPrice[j,1]=start
for(i in 2:noOfTicks){
gasPrice[j,i] <- gasPrice[j,i-1]*gasPriceGrowthRate[i]
}
rowNames <- c(rowNames, paste('gasPrice-',j,sep = ""))
}
colnames(gasPrice) <- columnNames
write.csv(gasPrice, file =paste('gasPrice.csv'), quote = F, row.names = rowNames)
#For biomass Price
start = 4.5
top = 1.01
max = 1.05
min = 0.97
noOfTicks = 50
rowNames = c()
modeSeq = seq(start, top, length.out = noOfTicks)
biomassPrice<- matrix(nrow = noOfRepetitions , ncol = noOfTicks )
for(j in 1:noOfRepetitions){
biomassPriceGrowthRate=rtriangle(noOfTicks,a=min,b=max, c=top)
biomassPrice[j,1]=start
for(i in 2:noOfTicks){
biomassPrice[j,i] <- biomassPrice[j,i-1]*biomassPriceGrowthRate[i]
}
rowNames <- c(rowNames, paste('biomassPrice-',j,sep = ""))
}
colnames(biomassPrice) <- columnNames
write.csv(biomassPrice, file =paste('biomassPrice.csv'), quote = F, row.names = rowNames)
#For uranium Price
start = 1.29
top = 1.00
max = 1.01
min = 0.99
noOfTicks = 50
rowNames = c()
modeSeq = seq(start, top, length.out = noOfTicks)
uraniumPrice<- matrix(nrow = noOfRepetitions , ncol = noOfTicks )
for(j in 1:noOfRepetitions){
uraniumPriceGrowthRate=rtriangle(noOfTicks,a=min,b=max, c=top)
uraniumPrice[j,1]=start
for(i in 2:noOfTicks){
uraniumPrice[j,i] <- uraniumPrice[j,i-1]*uraniumPriceGrowthRate[i]
}
rowNames <- c(rowNames, paste('uraniumPrice-',j,sep = ""))
}
colnames(uraniumPrice) <- columnNames
write.csv(uraniumPrice, file =paste('uraniumPrice.csv'), quote = F, row.names = rowNames)
#For lignite Price
start = 1.428
top = 1.00
max = 1.01
min = 0.99
noOfTicks = 50
rowNames = c()
modeSeq = seq(start, top, length.out = noOfTicks)
lignitePrice<- matrix(nrow = noOfRepetitions , ncol = noOfTicks )
for(j in 1:noOfRepetitions){
lignitePriceGrowthRate=rtriangle(noOfTicks,a=min,b=max, c=top)
lignitePrice[j,1]=start
for(i in 2:noOfTicks){
lignitePrice[j,i] <- lignitePrice[j,i-1]*lignitePriceGrowthRate[i]
}
rowNames <- c(rowNames, paste('lignitePrice-',j,sep = ""))
}
colnames(lignitePrice) <- columnNames
write.csv(lignitePrice, file =paste('lignitePrice.csv'), quote = F, row.names = rowNames)
library(triangle)
install.packages("triangle")
library(triangle)
#tThis file can generate n number of trends in the form of a triangular distribution, whose mode follows the
#sequence
library(reshape)
library(ggplot2)
library(plyr)
library(triangle)
noOfTicks = 50
noOfRepetitions = 120
columnNames = as.character(seq.int(2011,2060))
setwd("~/emlab-generation/emlab-generation/src/main/resources/data/stochasticDemandNLandDE")
#For NL
start = 1
top = 1.02
max = 1.05
min = 0.99
rowNames = c()
modeSeq = seq(start, top, length.out = noOfTicks)
demandNL<- matrix(nrow = noOfRepetitions, ncol = noOfTicks )
for(j in 1:noOfRepetitions){
demandNLGrowthRate=rtriangle(noOfTicks,a=min,b=max, c=top)
demandNL[j,1]=start
for(i in 2:noOfTicks){
demandNL[j,i] <- demandNL[j,i-1]*demandNLGrowthRate[i]
}
rowNames <- c(rowNames, paste('demandNL-',j,sep = ""))
}
colnames(demandNL) <- columnNames
write.csv(demandNL, file =paste('demandGrowthNL.csv'), quote = F, row.names = rowNames)
#For DE
start = 1
top = 1.02
max = 1.05
min = 0.99
noOfTicks = 50
rowNames = c()
modeSeq = seq(start, top, length.out = noOfTicks)
demandDE<- matrix(nrow = noOfRepetitions , ncol = noOfTicks )
for(j in 1:noOfRepetitions){
demandDEGrowthRate=rtriangle(noOfTicks,a=min,b=max, c=top)
demandDE[j,1]=start
for(i in 2:noOfTicks){
demandDE[j,i] <- demandDE[j,i-1]*demandDEGrowthRate[i]
}
rowNames <- c(rowNames, paste('demandDE-',j,sep = ""))
}
colnames(demandDE) <- columnNames
write.csv(demandDE, file =paste('demandGrowthDE.csv'), quote = F, row.names = rowNames)
setwd("~/emlab-generation/emlab-generation/src/main/resources/data/stochasticFuelPrices")
#For Coal Price
start = 3.6
top = 1.01
max = 1.05
min = 0.97
noOfTicks = 50
rowNames = c()
modeSeq = seq(start, top, length.out = noOfTicks)
coalPrice<- matrix(nrow = noOfRepetitions , ncol = noOfTicks )
for(j in 1:noOfRepetitions){
coalPriceGrowthRate=rtriangle(noOfTicks,a=min,b=max, c=top)
coalPrice[j,1]=start
for(i in 2:noOfTicks){
coalPrice[j,i] <- coalPrice[j,i-1]*coalPriceGrowthRate[i]
}
rowNames <- c(rowNames, paste('coalPrice-',j,sep = ""))
}
colnames(coalPrice) <- columnNames
write.csv(coalPrice, file =paste('coalPrice.csv'), quote = F, row.names = rowNames)
#For gas Price
start = 9.02
top = 1.01
max = 1.05
min = 0.97
noOfTicks = 50
rowNames = c()
modeSeq = seq(start, top, length.out = noOfTicks)
gasPrice<- matrix(nrow = noOfRepetitions , ncol = noOfTicks )
for(j in 1:noOfRepetitions){
gasPriceGrowthRate=rtriangle(noOfTicks,a=min,b=max, c=top)
gasPrice[j,1]=start
for(i in 2:noOfTicks){
gasPrice[j,i] <- gasPrice[j,i-1]*gasPriceGrowthRate[i]
}
rowNames <- c(rowNames, paste('gasPrice-',j,sep = ""))
}
colnames(gasPrice) <- columnNames
write.csv(gasPrice, file =paste('gasPrice.csv'), quote = F, row.names = rowNames)
#For biomass Price
start = 4.5
top = 1.01
max = 1.05
min = 0.97
noOfTicks = 50
rowNames = c()
modeSeq = seq(start, top, length.out = noOfTicks)
biomassPrice<- matrix(nrow = noOfRepetitions , ncol = noOfTicks )
for(j in 1:noOfRepetitions){
biomassPriceGrowthRate=rtriangle(noOfTicks,a=min,b=max, c=top)
biomassPrice[j,1]=start
for(i in 2:noOfTicks){
biomassPrice[j,i] <- biomassPrice[j,i-1]*biomassPriceGrowthRate[i]
}
rowNames <- c(rowNames, paste('biomassPrice-',j,sep = ""))
}
colnames(biomassPrice) <- columnNames
write.csv(biomassPrice, file =paste('biomassPrice.csv'), quote = F, row.names = rowNames)
#For uranium Price
start = 1.29
top = 1.00
max = 1.01
min = 0.99
noOfTicks = 50
rowNames = c()
modeSeq = seq(start, top, length.out = noOfTicks)
uraniumPrice<- matrix(nrow = noOfRepetitions , ncol = noOfTicks )
for(j in 1:noOfRepetitions){
uraniumPriceGrowthRate=rtriangle(noOfTicks,a=min,b=max, c=top)
uraniumPrice[j,1]=start
for(i in 2:noOfTicks){
uraniumPrice[j,i] <- uraniumPrice[j,i-1]*uraniumPriceGrowthRate[i]
}
rowNames <- c(rowNames, paste('uraniumPrice-',j,sep = ""))
}
colnames(uraniumPrice) <- columnNames
write.csv(uraniumPrice, file =paste('uraniumPrice.csv'), quote = F, row.names = rowNames)
#For lignite Price
start = 1.428
top = 1.00
max = 1.01
min = 0.99
noOfTicks = 50
rowNames = c()
modeSeq = seq(start, top, length.out = noOfTicks)
lignitePrice<- matrix(nrow = noOfRepetitions , ncol = noOfTicks )
for(j in 1:noOfRepetitions){
lignitePriceGrowthRate=rtriangle(noOfTicks,a=min,b=max, c=top)
lignitePrice[j,1]=start
for(i in 2:noOfTicks){
lignitePrice[j,i] <- lignitePrice[j,i-1]*lignitePriceGrowthRate[i]
}
rowNames <- c(rowNames, paste('lignitePrice-',j,sep = ""))
}
colnames(lignitePrice) <- columnNames
write.csv(lignitePrice, file =paste('lignitePrice.csv'), quote = F, row.names = rowNames)
nameFile <- "RDJ-RT-TC-ThreeMultiNodes.xml"
xmlFilePath<-"~/Desktop/emlabGen/scenarios/nameFile"
filestump<-'nameFile-'
# Step 2 building the scenarios: make separate data vectors
noOfRepetitions = 120
for(runID in seq(1:noOfRepetitions))
{
xmlFileContent<-readLines(xmlFilePath, encoding = "UTF-8")
xmlFileContent<-gsub("#repetitionNumber", runID, xmlFileContent)
writeLines(xmlFileContent, paste("~/Desktop/emlabGen/scenarios/KSFip120Scenarios/", filestump, runID, ".xml", sep=""))
}
for(runID in seq(1:noOfRepetitions))
{
xmlFileContent<-readLines(xmlFilePath, encoding = "UTF-8")
xmlFileContent<-gsub("#repetitionNumber", runID, xmlFileContent)
writeLines(xmlFileContent, paste("~/Desktop/emlabGen/scenarios/nameFile/", filestump, runID, ".xml", sep=""))
}
nameFile <- "RDJ-RT-TC-ThreeMultiNodes"
scenarioFile <- paste(nameFile, ".xml", sep="")
xmlFilePath<-"~/Desktop/emlabGen/scenarios/nameFile"
filestump<-'nameFile-'
# Step 2 building the scenarios: make separate data vectors
noOfRepetitions = 120
for(runID in seq(1:noOfRepetitions))
{
xmlFileContent<-readLines(xmlFilePath, encoding = "UTF-8")
xmlFileContent<-gsub("#repetitionNumber", runID, xmlFileContent)
writeLines(xmlFileContent, paste("~/Desktop/emlabGen/scenarios/nameFile/", filestump, runID, ".xml", sep=""))
}
#Placeholders
# that need to be replaced with #
nameFile <- "RDJ-RT-TC-ThreeMultiNodes"
scenarioFile <- paste(nameFile, ".xml", sep="")
xmlFilePath<-"~/Desktop/emlabGen/scenarios/nameFile"
filestump<-'nameFile-'
# Step 2 building the scenarios: make separate data vectors
noOfRepetitions = 120
for(runID in seq(1:noOfRepetitions))
{
xmlFileContent<-readLines(xmlFilePath, encoding = "UTF-8")
xmlFileContent<-gsub("#repetitionNumber", runID, xmlFileContent)
writeLines(xmlFileContent, paste("~/Desktop/emlabGen/scenarios/nameFile", filestump, runID, ".xml", sep=""))
}
nameFile <- "RDJ-RT-TC-ThreeMultiNodes"
scenarioFile <- paste(nameFile, ".xml", sep="")
xmlFilePath<-"~/Desktop/emlabGen/scenarios/scenarioFile"
filestump<-'nameFile-'
# Step 2 building the scenarios: make separate data vectors
noOfRepetitions = 120
for(runID in seq(1:noOfRepetitions))
{
xmlFileContent<-readLines(xmlFilePath, encoding = "UTF-8")
xmlFileContent<-gsub("#repetitionNumber", runID, xmlFileContent)
writeLines(xmlFileContent, paste("~/Desktop/emlabGen/scenarios/nameFile", filestump, runID, ".xml", sep=""))
}
#Placeholders
# Step 1 building the scenarios: insert dataframe and read the scenario file. Name parameters
# that need to be replaced with #
xmlFilePath<-"~/Desktop/emlabGen/scenarios/RDJ-RT-TC-ThreeMultiNodes.xml"
filestump<-'RDJ-RT-TC-ThreeMultiNodes-'
# Step 2 building the scenarios: make separate data vectors
noOfRepetitions = 120
for(runID in seq(1:noOfRepetitions))
{
xmlFileContent<-readLines(xmlFilePath, encoding = "UTF-8")
xmlFileContent<-gsub("#repetitionNumber", runID, xmlFileContent)
writeLines(xmlFileContent, paste("~/Desktop/emlabGen/scenarios/RDJ-RT-TC-ThreeMultiNodes/", filestump, runID, ".xml", sep=""))
}
